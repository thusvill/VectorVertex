#version 450

layout (location =0) out vec4 outColor;

layout(location = 0) in vec3 fragColor;
layout(location = 1) in vec3 fragPosWorld;
layout(location = 2) in vec3 fragNormalWorld;



layout(set = 0, binding = 0) uniform globalUbo{
    mat4 projection;
    mat4 view;
    mat4 inv_view;
    vec4 ambient_color; // w is intensity
    PointLight point_lights[10];
    DirectionalLight directional_lights[2];

    int num_lights;
} ubo;

layout(push_constant) uniform Push{
    mat4 modelMatrix;
    mat4 normalMatrix;
} push;


struct DirectionalLight {
    vec3 direction;
    vec3 color;
};

struct PointLight {
    vec3 position;
    vec3 color;
};

struct AreaLight {
    vec3 position;
    vec3 color;
    float metallic;
    float roughness;
};

vec3 calculateDiffuse(vec3 normal, vec3 lightDir, vec3 lightColor) {
    float lambertian = max(dot(normal, lightDir), 0.0);
    return lambertian * lightColor;
}

vec3 calculateSpecular(vec3 normal, vec3 lightDir, vec3 viewDir, float roughness, vec3 lightColor) {
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float NdotH = max(dot(normal, halfwayDir), 0.0);
    float roughnessSq = roughness * roughness;
    float denom = (NdotH * NdotH * (roughnessSq - 1.0) + 1.0);
    float specular = ((2.0 * NdotH) / denom) * exp((NdotH * NdotH - 1.0) / (roughnessSq * NdotH * NdotH));
    return specular * lightColor;
}

vec3 fresnelSchlick(float F0, vec3 lightDir, vec3 viewDir) {
    return F0 + (1.0 - F0) * pow(1.0 - dot(lightDir, -viewDir), 5.0);
}

vec3 calculateDirectionalLight(DirectionalLight dirLight, vec3 normal, vec3 viewDir) {
    vec3 lightDir = normalize(-dirLight.direction);
    vec3 diffuse = calculateDiffuse(normal, lightDir, dirLight.color);
    vec3 specular = calculateSpecular(normal, lightDir, viewDir, 0.5, dirLight.color);
    return diffuse + specular;
}

vec3 calculatePointLight(PointLight pointLight, vec3 normal, vec3 viewDir) {
    vec3 lightDir = normalize(pointLight.position - FragPosition);
    float distance = length(pointLight.position - FragPosition);
    vec3 diffuse = calculateDiffuse(normal, lightDir, pointLight.color) / (distance * distance);
    vec3 specular = calculateSpecular(normal, lightDir, viewDir, 0.5, pointLight.color) / (distance * distance);
    return diffuse + specular;
}

// Area Light
vec3 calculateAreaLight(AreaLight areaLight, vec3 normal, vec3 viewDir) {
    vec3 lightDir = normalize(areaLight.position - FragPosition);
    float distance = length(areaLight.position - FragPosition);
    vec3 diffuse = calculateDiffuse(normal, lightDir, areaLight.color) / (distance * distance);
    vec3 specular = calculateSpecular(normal, lightDir, viewDir, areaLight.roughness, areaLight.color) / (distance * distance);
    float F = fresnelSchlick(0.04, lightDir, viewDir);
    return (1.0 - F) * (1.0 - areaLight.metallic) * diffuse + F * specular;
}

void main(){
    for(i =0; i < point_lights.length; i++){
        outColor += vec4(calculatePointLight(point_lights[i], fragNormalWorld, fragNormalWorld), 1.0);
    }

    outColor = clamp(outColor, 0.0, 1.0);
}
